// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvt.proto
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;

namespace Mvtcs
{
    /// <summary>Holder for reflection information generated from mvt.proto</summary>
    public static partial class MvtReflection
    {
        #region Descriptor

        /// <summary>File descriptor for mvt.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static MvtReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CgltdnQucHJvdG8i7gMKBFRpbGUSGwoGbGF5ZXJzGAMgAygLMgsuVGlsZS5M",
                  "YXllchqtAQoFVmFsdWUSFgoMc3RyaW5nX3ZhbHVlGAEgASgJSAASFQoLZmxv",
                  "YXRfdmFsdWUYAiABKAJIABIWCgxkb3VibGVfdmFsdWUYAyABKAFIABITCglp",
                  "bnRfdmFsdWUYBCABKANIABIUCgp1aW50X3ZhbHVlGAUgASgESAASFAoKc2lu",
                  "dF92YWx1ZRgGIAEoEkgAEhQKCmJvb2xfdmFsdWUYByABKAhIAEIGCgRLaW5k",
                  "GlMKB0ZlYXR1cmUSCgoCaWQYASABKAQSDAoEdGFncxgCIAMoDRIcCgR0eXBl",
                  "GAMgASgOMg4uVGlsZS5HZW9tVHlwZRIQCghnZW9tZXRyeRgEIAMoDRqCAQoF",
                  "TGF5ZXISDwoHdmVyc2lvbhgPIAEoDRIMCgRuYW1lGAEgASgJEh8KCGZlYXR1",
                  "cmVzGAIgAygLMg0uVGlsZS5GZWF0dXJlEgwKBGtleXMYAyADKAkSGwoGdmFs",
                  "dWVzGAQgAygLMgsuVGlsZS5WYWx1ZRIOCgZleHRlbnQYBSABKA0iPwoIR2Vv",
                  "bVR5cGUSCwoHVW5rbm93bhAAEgkKBVBvaW50EAESDgoKTGluZVN0cmluZxAC",
                  "EgsKB1BvbHlnb24QA0IIqgIFbXZ0Y3NiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(Mvtcs.Tile), Mvtcs.Tile.Parser, new[]{ "Layers" }, null, new[]{ typeof(Mvtcs.Tile.Types.GeomType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(Mvtcs.Tile.Types.Value), Mvtcs.Tile.Types.Value.Parser, new[]{ "StringValue", "FloatValue", "DoubleValue", "IntValue", "UintValue", "SintValue", "BoolValue" }, new[]{ "Kind" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Mvtcs.Tile.Types.Feature), Mvtcs.Tile.Types.Feature.Parser, new[]{ "Id", "Tags", "Type", "Geometry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Mvtcs.Tile.Types.Layer), Mvtcs.Tile.Types.Layer.Parser, new[]{ "Version", "Name", "Features", "Keys", "Values", "Extent" }, null, null, null)})
                }));
        }

        #endregion Descriptor
    }

    #region Messages

    public sealed partial class Tile : pb::IMessage<Tile>
    {
        private static readonly pb::MessageParser<Tile> _parser = new pb::MessageParser<Tile>(() => new Tile());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return Mvtcs.MvtReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tile()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tile(Tile other) : this()
        {
            layers_ = other.layers_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tile Clone()
        {
            return new Tile(this);
        }

        /// <summary>Field number for the "layers" field.</summary>
        public const int LayersFieldNumber = 3;

        private static readonly pb::FieldCodec<Mvtcs.Tile.Types.Layer> _repeated_layers_codec
            = pb::FieldCodec.ForMessage(26, Mvtcs.Tile.Types.Layer.Parser);

        private readonly pbc::RepeatedField<Mvtcs.Tile.Types.Layer> layers_ = new pbc::RepeatedField<Mvtcs.Tile.Types.Layer>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Mvtcs.Tile.Types.Layer> Layers
        {
            get { return layers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Tile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tile other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!layers_.Equals(other.layers_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= layers_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            layers_.WriteTo(output, _repeated_layers_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += layers_.CalculateSize(_repeated_layers_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tile other)
        {
            if (other == null)
            {
                return;
            }
            layers_.Add(other.layers_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 26:
                        {
                            layers_.AddEntriesFrom(input, _repeated_layers_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Tile message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum GeomType
            {
                [pbr::OriginalName("Unknown")] Unknown = 0,
                [pbr::OriginalName("Point")] Point = 1,
                [pbr::OriginalName("LineString")] LineString = 2,
                [pbr::OriginalName("Polygon")] Polygon = 3,
            }

            /// <summary>
            /// Variant type encoding
            /// </summary>
            public sealed partial class Value : pb::IMessage<Value>
            {
                private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Value> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Mvtcs.Tile.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Value()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Value(Value other) : this()
                {
                    switch (other.KindCase)
                    {
                        case KindOneofCase.StringValue:
                            StringValue = other.StringValue;
                            break;

                        case KindOneofCase.FloatValue:
                            FloatValue = other.FloatValue;
                            break;

                        case KindOneofCase.DoubleValue:
                            DoubleValue = other.DoubleValue;
                            break;

                        case KindOneofCase.IntValue:
                            IntValue = other.IntValue;
                            break;

                        case KindOneofCase.UintValue:
                            UintValue = other.UintValue;
                            break;

                        case KindOneofCase.SintValue:
                            SintValue = other.SintValue;
                            break;

                        case KindOneofCase.BoolValue:
                            BoolValue = other.BoolValue;
                            break;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Value Clone()
                {
                    return new Value(this);
                }

                /// <summary>Field number for the "string_value" field.</summary>
                public const int StringValueFieldNumber = 1;

                /// <summary>
                /// Exactly one of these values may be present in a valid message
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string StringValue
                {
                    get { return kindCase_ == KindOneofCase.StringValue ? (string)kind_ : ""; }
                    set
                    {
                        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        kindCase_ = KindOneofCase.StringValue;
                    }
                }

                /// <summary>Field number for the "float_value" field.</summary>
                public const int FloatValueFieldNumber = 2;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float FloatValue
                {
                    get { return kindCase_ == KindOneofCase.FloatValue ? (float)kind_ : 0F; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.FloatValue;
                    }
                }

                /// <summary>Field number for the "double_value" field.</summary>
                public const int DoubleValueFieldNumber = 3;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double DoubleValue
                {
                    get { return kindCase_ == KindOneofCase.DoubleValue ? (double)kind_ : 0D; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.DoubleValue;
                    }
                }

                /// <summary>Field number for the "int_value" field.</summary>
                public const int IntValueFieldNumber = 4;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long IntValue
                {
                    get { return kindCase_ == KindOneofCase.IntValue ? (long)kind_ : 0L; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.IntValue;
                    }
                }

                /// <summary>Field number for the "uint_value" field.</summary>
                public const int UintValueFieldNumber = 5;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong UintValue
                {
                    get { return kindCase_ == KindOneofCase.UintValue ? (ulong)kind_ : 0UL; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.UintValue;
                    }
                }

                /// <summary>Field number for the "sint_value" field.</summary>
                public const int SintValueFieldNumber = 6;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SintValue
                {
                    get { return kindCase_ == KindOneofCase.SintValue ? (long)kind_ : 0L; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.SintValue;
                    }
                }

                /// <summary>Field number for the "bool_value" field.</summary>
                public const int BoolValueFieldNumber = 7;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool BoolValue
                {
                    get { return kindCase_ == KindOneofCase.BoolValue ? (bool)kind_ : false; }
                    set
                    {
                        kind_ = value;
                        kindCase_ = KindOneofCase.BoolValue;
                    }
                }

                private object kind_;

                /// <summary>Enum of possible cases for the "Kind" oneof.</summary>
                public enum KindOneofCase
                {
                    None = 0,
                    StringValue = 1,
                    FloatValue = 2,
                    DoubleValue = 3,
                    IntValue = 4,
                    UintValue = 5,
                    SintValue = 6,
                    BoolValue = 7,
                }

                private KindOneofCase kindCase_ = KindOneofCase.None;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KindOneofCase KindCase
                {
                    get { return kindCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearKind()
                {
                    kindCase_ = KindOneofCase.None;
                    kind_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Value);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Value other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (StringValue != other.StringValue) return false;
                    if (FloatValue != other.FloatValue) return false;
                    if (DoubleValue != other.DoubleValue) return false;
                    if (IntValue != other.IntValue) return false;
                    if (UintValue != other.UintValue) return false;
                    if (SintValue != other.SintValue) return false;
                    if (BoolValue != other.BoolValue) return false;
                    if (KindCase != other.KindCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (kindCase_ == KindOneofCase.StringValue) hash ^= StringValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.IntValue) hash ^= IntValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.UintValue) hash ^= UintValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.SintValue) hash ^= SintValue.GetHashCode();
                    if (kindCase_ == KindOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
                    hash ^= (int)kindCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (kindCase_ == KindOneofCase.StringValue)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(StringValue);
                    }
                    if (kindCase_ == KindOneofCase.FloatValue)
                    {
                        output.WriteRawTag(21);
                        output.WriteFloat(FloatValue);
                    }
                    if (kindCase_ == KindOneofCase.DoubleValue)
                    {
                        output.WriteRawTag(25);
                        output.WriteDouble(DoubleValue);
                    }
                    if (kindCase_ == KindOneofCase.IntValue)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt64(IntValue);
                    }
                    if (kindCase_ == KindOneofCase.UintValue)
                    {
                        output.WriteRawTag(40);
                        output.WriteUInt64(UintValue);
                    }
                    if (kindCase_ == KindOneofCase.SintValue)
                    {
                        output.WriteRawTag(48);
                        output.WriteSInt64(SintValue);
                    }
                    if (kindCase_ == KindOneofCase.BoolValue)
                    {
                        output.WriteRawTag(56);
                        output.WriteBool(BoolValue);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (kindCase_ == KindOneofCase.StringValue)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
                    }
                    if (kindCase_ == KindOneofCase.FloatValue)
                    {
                        size += 1 + 4;
                    }
                    if (kindCase_ == KindOneofCase.DoubleValue)
                    {
                        size += 1 + 8;
                    }
                    if (kindCase_ == KindOneofCase.IntValue)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
                    }
                    if (kindCase_ == KindOneofCase.UintValue)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UintValue);
                    }
                    if (kindCase_ == KindOneofCase.SintValue)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SintValue);
                    }
                    if (kindCase_ == KindOneofCase.BoolValue)
                    {
                        size += 1 + 1;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Value other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.KindCase)
                    {
                        case KindOneofCase.StringValue:
                            StringValue = other.StringValue;
                            break;

                        case KindOneofCase.FloatValue:
                            FloatValue = other.FloatValue;
                            break;

                        case KindOneofCase.DoubleValue:
                            DoubleValue = other.DoubleValue;
                            break;

                        case KindOneofCase.IntValue:
                            IntValue = other.IntValue;
                            break;

                        case KindOneofCase.UintValue:
                            UintValue = other.UintValue;
                            break;

                        case KindOneofCase.SintValue:
                            SintValue = other.SintValue;
                            break;

                        case KindOneofCase.BoolValue:
                            BoolValue = other.BoolValue;
                            break;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;

                            case 10:
                                {
                                    StringValue = input.ReadString();
                                    break;
                                }
                            case 21:
                                {
                                    FloatValue = input.ReadFloat();
                                    break;
                                }
                            case 25:
                                {
                                    DoubleValue = input.ReadDouble();
                                    break;
                                }
                            case 32:
                                {
                                    IntValue = input.ReadInt64();
                                    break;
                                }
                            case 40:
                                {
                                    UintValue = input.ReadUInt64();
                                    break;
                                }
                            case 48:
                                {
                                    SintValue = input.ReadSInt64();
                                    break;
                                }
                            case 56:
                                {
                                    BoolValue = input.ReadBool();
                                    break;
                                }
                        }
                    }
                }
            }

            public sealed partial class Feature : pb::IMessage<Feature>
            {
                private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Feature> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Mvtcs.Tile.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Feature()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Feature(Feature other) : this()
                {
                    id_ = other.id_;
                    tags_ = other.tags_.Clone();
                    type_ = other.type_;
                    geometry_ = other.geometry_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Feature Clone()
                {
                    return new Feature(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;

                private ulong id_;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = value;
                    }
                }

                /// <summary>Field number for the "tags" field.</summary>
                public const int TagsFieldNumber = 2;

                private static readonly pb::FieldCodec<uint> _repeated_tags_codec
                    = pb::FieldCodec.ForUInt32(18);

                private readonly pbc::RepeatedField<uint> tags_ = new pbc::RepeatedField<uint>();

                /// <summary>
                /// Tags of this feature. Even numbered values refer to the nth
                /// value in the keys list on the tile message, odd numbered
                /// values refer to the nth value in the values list on the tile
                /// message.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<uint> Tags
                {
                    get { return tags_; }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 3;

                private Mvtcs.Tile.Types.GeomType type_ = 0;

                /// <summary>
                /// The type of geometry stored in this feature.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Mvtcs.Tile.Types.GeomType Type
                {
                    get { return type_; }
                    set
                    {
                        type_ = value;
                    }
                }

                /// <summary>Field number for the "geometry" field.</summary>
                public const int GeometryFieldNumber = 4;

                private static readonly pb::FieldCodec<uint> _repeated_geometry_codec
                    = pb::FieldCodec.ForUInt32(34);

                private readonly pbc::RepeatedField<uint> geometry_ = new pbc::RepeatedField<uint>();

                /// <summary>
                /// Contains a stream of commands and parameters (vertices). The
                /// repeat count is shifted to the left by 3 bits. This means
                /// that the command has 3 bits (0-7). The repeat count
                /// indicates how often this command is to be repeated. Defined
                /// commands are:
                /// - MoveTo:    1   (2 parameters follow)
                /// - LineTo:    2   (2 parameters follow)
                /// - ClosePath: 7   (no parameters follow)
                ///
                /// Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
                /// Encoded as: [ 9 3 6 18 5 6 12 22 15 ]
                ///                                  == command type 7 (ClosePath), length 1
                ///                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
                ///                         === relative LineTo(+5, +6) == LineTo(8, 12)
                ///                      == [00010 010] = command type 2 (LineTo), length 2
                ///                  === relative MoveTo(+3, +6)
                ///              == [00001 001] = command type 1 (MoveTo), length 1
                /// Commands are encoded as uint32 varints, vertex parameters are
                /// encoded as sint32 varints (zigzag). Vertex parameters are
                /// also encoded as deltas to the previous position. The original
                /// position is (0,0)
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<uint> Geometry
                {
                    get { return geometry_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Feature);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Feature other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (!tags_.Equals(other.tags_)) return false;
                    if (Type != other.Type) return false;
                    if (!geometry_.Equals(other.geometry_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id != 0UL) hash ^= Id.GetHashCode();
                    hash ^= tags_.GetHashCode();
                    if (Type != 0) hash ^= Type.GetHashCode();
                    hash ^= geometry_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id != 0UL)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt64(Id);
                    }
                    tags_.WriteTo(output, _repeated_tags_codec);
                    if (Type != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteEnum((int)Type);
                    }
                    geometry_.WriteTo(output, _repeated_geometry_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
                    }
                    size += tags_.CalculateSize(_repeated_tags_codec);
                    if (Type != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
                    }
                    size += geometry_.CalculateSize(_repeated_geometry_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Feature other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id != 0UL)
                    {
                        Id = other.Id;
                    }
                    tags_.Add(other.tags_);
                    if (other.Type != 0)
                    {
                        Type = other.Type;
                    }
                    geometry_.Add(other.geometry_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;

                            case 8:
                                {
                                    Id = input.ReadUInt64();
                                    break;
                                }
                            case 18:
                            case 16:
                                {
                                    tags_.AddEntriesFrom(input, _repeated_tags_codec);
                                    break;
                                }
                            case 24:
                                {
                                    type_ = (Mvtcs.Tile.Types.GeomType)input.ReadEnum();
                                    break;
                                }
                            case 34:
                            case 32:
                                {
                                    geometry_.AddEntriesFrom(input, _repeated_geometry_codec);
                                    break;
                                }
                        }
                    }
                }
            }

            public sealed partial class Layer : pb::IMessage<Layer>
            {
                private static readonly pb::MessageParser<Layer> _parser = new pb::MessageParser<Layer>(() => new Layer());

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Layer> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Mvtcs.Tile.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Layer()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Layer(Layer other) : this()
                {
                    version_ = other.version_;
                    name_ = other.name_;
                    features_ = other.features_.Clone();
                    keys_ = other.keys_.Clone();
                    values_ = other.values_.Clone();
                    extent_ = other.extent_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Layer Clone()
                {
                    return new Layer(this);
                }

                /// <summary>Field number for the "version" field.</summary>
                public const int VersionFieldNumber = 15;

                private uint version_;

                /// <summary>
                /// Any compliant implementation must first read the version
                /// number encoded in this message and choose the correct
                /// implementation for this version number before proceeding to
                /// decode other parts of this message.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Version
                {
                    get { return version_; }
                    set
                    {
                        version_ = value;
                    }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;

                private string name_ = "";

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name
                {
                    get { return name_; }
                    set
                    {
                        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "features" field.</summary>
                public const int FeaturesFieldNumber = 2;

                private static readonly pb::FieldCodec<Mvtcs.Tile.Types.Feature> _repeated_features_codec
                    = pb::FieldCodec.ForMessage(18, Mvtcs.Tile.Types.Feature.Parser);

                private readonly pbc::RepeatedField<Mvtcs.Tile.Types.Feature> features_ = new pbc::RepeatedField<Mvtcs.Tile.Types.Feature>();

                /// <summary>
                /// The actual features in this tile.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<Mvtcs.Tile.Types.Feature> Features
                {
                    get { return features_; }
                }

                /// <summary>Field number for the "keys" field.</summary>
                public const int KeysFieldNumber = 3;

                private static readonly pb::FieldCodec<string> _repeated_keys_codec
                    = pb::FieldCodec.ForString(26);

                private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();

                /// <summary>
                /// Dictionary encoding for keys
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> Keys
                {
                    get { return keys_; }
                }

                /// <summary>Field number for the "values" field.</summary>
                public const int ValuesFieldNumber = 4;

                private static readonly pb::FieldCodec<Mvtcs.Tile.Types.Value> _repeated_values_codec
                    = pb::FieldCodec.ForMessage(34, Mvtcs.Tile.Types.Value.Parser);

                private readonly pbc::RepeatedField<Mvtcs.Tile.Types.Value> values_ = new pbc::RepeatedField<Mvtcs.Tile.Types.Value>();

                /// <summary>
                /// Dictionary encoding for values
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<Mvtcs.Tile.Types.Value> Values
                {
                    get { return values_; }
                }

                /// <summary>Field number for the "extent" field.</summary>
                public const int ExtentFieldNumber = 5;

                private uint extent_;

                /// <summary>
                /// The bounding box in this tile spans from 0..4095 units
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Extent
                {
                    get { return extent_; }
                    set
                    {
                        extent_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Layer);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Layer other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Version != other.Version) return false;
                    if (Name != other.Name) return false;
                    if (!features_.Equals(other.features_)) return false;
                    if (!keys_.Equals(other.keys_)) return false;
                    if (!values_.Equals(other.values_)) return false;
                    if (Extent != other.Extent) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Version != 0) hash ^= Version.GetHashCode();
                    if (Name.Length != 0) hash ^= Name.GetHashCode();
                    hash ^= features_.GetHashCode();
                    hash ^= keys_.GetHashCode();
                    hash ^= values_.GetHashCode();
                    if (Extent != 0) hash ^= Extent.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Name.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Name);
                    }
                    features_.WriteTo(output, _repeated_features_codec);
                    keys_.WriteTo(output, _repeated_keys_codec);
                    values_.WriteTo(output, _repeated_values_codec);
                    if (Extent != 0)
                    {
                        output.WriteRawTag(40);
                        output.WriteUInt32(Extent);
                    }
                    if (Version != 0)
                    {
                        output.WriteRawTag(120);
                        output.WriteUInt32(Version);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Version != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
                    }
                    if (Name.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                    }
                    size += features_.CalculateSize(_repeated_features_codec);
                    size += keys_.CalculateSize(_repeated_keys_codec);
                    size += values_.CalculateSize(_repeated_values_codec);
                    if (Extent != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Extent);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Layer other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Version != 0)
                    {
                        Version = other.Version;
                    }
                    if (other.Name.Length != 0)
                    {
                        Name = other.Name;
                    }
                    features_.Add(other.features_);
                    keys_.Add(other.keys_);
                    values_.Add(other.values_);
                    if (other.Extent != 0)
                    {
                        Extent = other.Extent;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;

                            case 10:
                                {
                                    Name = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    features_.AddEntriesFrom(input, _repeated_features_codec);
                                    break;
                                }
                            case 26:
                                {
                                    keys_.AddEntriesFrom(input, _repeated_keys_codec);
                                    break;
                                }
                            case 34:
                                {
                                    values_.AddEntriesFrom(input, _repeated_values_codec);
                                    break;
                                }
                            case 40:
                                {
                                    Extent = input.ReadUInt32();
                                    break;
                                }
                            case 120:
                                {
                                    Version = input.ReadUInt32();
                                    break;
                                }
                        }
                    }
                }
            }
        }

        #endregion Nested types
    }

    #endregion Messages
}

#endregion Designer generated code